import cv2
import numpy as np

def detect_signature(image_path):
    # Read the image
    img = cv2.imread(image_path)
    
    # Convert the image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Apply GaussianBlur to reduce noise and help contour detection
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Use the Canny edge detector to find edges in the image
    edges = cv2.Canny(blurred, 50, 150)
    
    # Find contours in the edged image
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Sort contours by area in descending order
    contours = sorted(contours, key=cv2.contourArea, reverse=True)
    
    # Loop over the contours
    for contour in contours:
        # Approximate the contour
        epsilon = 0.02 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
    
        # If the contour has four vertices, it could be a rectangle (signature)
        if len(approx) == 4:
            x, y, w, h = cv2.boundingRect(contour)
            roi = img[y:y+h, x:x+w]
            return roi

def save_cropped_signature(image_path, output_path):
    signature = detect_signature(image_path)
    
    if signature is not None:
        cv2.imwrite(output_image_path, signature)
        print(f"Signature cropped and saved at: {output_image_path}")
    else:
        print("Signature not found in the image.")

if __name__ == "__main__":
    input_image_path = 'C:\\Users\\LENOVO\\Desktop\\Signature\\data\\data\\real\\check\\test.jpg'
    output_image_path = 'C:\\Users\\LENOVO\\Desktop\\Signature\\data\\data\\real\\check_output'

    save_cropped_signature(input_image_path, output_image_path)
